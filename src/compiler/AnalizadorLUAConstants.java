/* Generated By:JavaCC: Do not edit this line. AnalizadorLUAConstants.java */
package compiler;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorLUAConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int AND = 1;
    /**
     * RegularExpression Id.
     */
    int BREAN = 2;
    /**
     * RegularExpression Id.
     */
    int DO = 3;
    /**
     * RegularExpression Id.
     */
    int ELSE = 4;
    /**
     * RegularExpression Id.
     */
    int ELSEIF = 5;
    /**
     * RegularExpression Id.
     */
    int END = 6;
    /**
     * RegularExpression Id.
     */
    int FALSE = 7;
    /**
     * RegularExpression Id.
     */
    int FOR = 8;
    /**
     * RegularExpression Id.
     */
    int FUNCTION = 9;
    /**
     * RegularExpression Id.
     */
    int IF = 10;
    /**
     * RegularExpression Id.
     */
    int IN = 11;
    /**
     * RegularExpression Id.
     */
    int LOCAL = 12;
    /**
     * RegularExpression Id.
     */
    int NIL = 13;
    /**
     * RegularExpression Id.
     */
    int NOT = 14;
    /**
     * RegularExpression Id.
     */
    int OR = 15;
    /**
     * RegularExpression Id.
     */
    int REPEAT = 16;
    /**
     * RegularExpression Id.
     */
    int RETURN = 17;
    /**
     * RegularExpression Id.
     */
    int THEN = 18;
    /**
     * RegularExpression Id.
     */
    int TRUE = 19;
    /**
     * RegularExpression Id.
     */
    int UNTIL = 20;
    /**
     * RegularExpression Id.
     */
    int WHILE = 21;
    /**
     * RegularExpression Id.
     */
    int PRINT = 22;
    /**
     * RegularExpression Id.
     */
    int LENGHT = 23;
    /**
     * RegularExpression Id.
     */
    int ASIGNACION = 24;
    /**
     * RegularExpression Id.
     */
    int SUMA = 25;
    /**
     * RegularExpression Id.
     */
    int RESTA = 26;
    /**
     * RegularExpression Id.
     */
    int MULTIPLICACION = 27;
    /**
     * RegularExpression Id.
     */
    int DIVISION = 28;
    /**
     * RegularExpression Id.
     */
    int MODULO = 29;
    /**
     * RegularExpression Id.
     */
    int INCREMENTO = 30;
    /**
     * RegularExpression Id.
     */
    int DECREMENTO = 31;
    /**
     * RegularExpression Id.
     */
    int SUMA_IGUAL = 32;
    /**
     * RegularExpression Id.
     */
    int RESTA_IGUAL = 33;
    /**
     * RegularExpression Id.
     */
    int MULTIPLICACION_IGUAL = 34;
    /**
     * RegularExpression Id.
     */
    int DIVISION_IGUAL = 35;
    /**
     * RegularExpression Id.
     */
    int MODULO_IGUAL = 36;
    /**
     * RegularExpression Id.
     */
    int IGUAL_A = 37;
    /**
     * RegularExpression Id.
     */
    int MENOR_IGUAL = 38;
    /**
     * RegularExpression Id.
     */
    int MAYOR_IGUAL = 39;
    /**
     * RegularExpression Id.
     */
    int MENOR = 40;
    /**
     * RegularExpression Id.
     */
    int MAYOR = 41;
    /**
     * RegularExpression Id.
     */
    int DIFERENTE = 42;
    /**
     * RegularExpression Id.
     */
    int OR_LOGICO = 43;
    /**
     * RegularExpression Id.
     */
    int AND_LOGICO = 44;
    /**
     * RegularExpression Id.
     */
    int CONCATENA_STRINGS = 45;
    /**
     * RegularExpression Id.
     */
    int PARENTESIS_APERTURA = 46;
    /**
     * RegularExpression Id.
     */
    int PARENTESIS_CIERRE = 47;
    /**
     * RegularExpression Id.
     */
    int LLAVE_APERTURA = 48;
    /**
     * RegularExpression Id.
     */
    int LLAVE_CIERRE = 49;
    /**
     * RegularExpression Id.
     */
    int CORCHETE_ABRE = 50;
    /**
     * RegularExpression Id.
     */
    int CORCHETE_CIERRE = 51;
    /**
     * RegularExpression Id.
     */
    int DELIMITADOR = 52;
    /**
     * RegularExpression Id.
     */
    int DOS_PUNTOS = 53;
    /**
     * RegularExpression Id.
     */
    int PUNTO = 54;
    /**
     * RegularExpression Id.
     */
    int COMA = 55;
    /**
     * RegularExpression Id.
     */
    int VALOR_ENTERO = 56;
    /**
     * RegularExpression Id.
     */
    int VALOR_FLOTANTE = 57;
    /**
     * RegularExpression Id.
     */
    int VALOR_CADENA = 58;
    /**
     * RegularExpression Id.
     */
    int VALOR_CARACTER = 59;
    /**
     * RegularExpression Id.
     */
    int IDENTIFICADOR = 60;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
        "<EOF>",
        "\"and\"",
        "\"break\"",
        "\"do\"",
        "\"else\"",
        "\"elseif\"",
        "\"end\"",
        "\"false\"",
        "\"for\"",
        "\"function\"",
        "\"if\"",
        "\"in\"",
        "\"local\"",
        "\"nil\"",
        "\"not\"",
        "\"or\"",
        "\"repeat\"",
        "\"return\"",
        "\"then\"",
        "\"true\"",
        "\"until\"",
        "\"while\"",
        "\"print\"",
        "\"#\"",
        "\"=\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"%\"",
        "\"++\"",
        "\"--\"",
        "\"+=\"",
        "\"-=\"",
        "\"*=\"",
        "\"/=\"",
        "\"%=\"",
        "\"==\"",
        "\"<=\"",
        "\">=\"",
        "\"<\"",
        "\">\"",
        "\"~=\"",
        "\"||\"",
        "\"&&\"",
        "\"..\"",
        "\"(\"",
        "\")\"",
        "\"{\"",
        "\"}\"",
        "\"[\"",
        "\"]\"",
        "\";\"",
        "\":\"",
        "\".\"",
        "\",\"",
        "<VALOR_ENTERO>",
        "<VALOR_FLOTANTE>",
        "<VALOR_CADENA>",
        "<VALOR_CARACTER>",
        "<IDENTIFICADOR>",
        "\" \"",
        "\"\\r\"",
        "\"\\t\"",
        "\"\\n\"",};

}
