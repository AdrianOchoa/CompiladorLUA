/* Generated By:JavaCC: Do not edit this line. AnalizadorLUA.java */
package compiler;

import java.util.ArrayList;

public class AnalizadorLUA implements AnalizadorLUAConstants {

    static ArrayList<String> lista = new ArrayList();
    private static final StringBuilder erroresSintacticos;
    public static int contadorErrores;

    static {
        erroresSintacticos = new StringBuilder();
        contadorErrores = 0;
    }

    public static void main(String args[]) throws ParseException {
        try {
            AnalizadorLUA al = new AnalizadorLUA(System.in);
            al.ejecutarAnalisis();
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void registraLogSintactico(String mensaje) {
        erroresSintacticos.append(mensaje).append("\u005cn");
    }

    public static void registraErrorSintactico(String mensaje, Token token) {
        contadorErrores++;
        StringBuilder sb = new StringBuilder()
                .append(mensaje)
                .append("\u005cn")
                .append("Linea: ").append(token.beginLine)
                .append("\u005cn")
                .append("   Columna: ").append(token.beginColumn);
        registraLogSintactico(sb.toString());
    }

    public static ArrayList<String> getLista() {
        return lista;
    }

    public static StringBuilder getErrores() {
        return erroresSintacticos;
    }

    void skipTo(int kind) {
        Token tok = getToken(0);
        while (tok.kind != EOF && tok.kind != kind) {
            tok = getNextToken();
            System.out.println("Saltanto token: " + tok.image);
        }
    }

    void skipTo(String st) {
        Token tok = getToken(0);
        System.out.println("Token saltado " + tok.image);
        while (tok.kind != EOF && !tok.image.equals(st)) {
            tok = getNextToken();
        }
    }

    void skipTo(int[] left, int[] right) {
        Token prev = getToken(0);
        Token next = getToken(1);
        boolean flag = false;
        if (prev.kind == EOF || next.kind == EOF) {
            flag = true;
        }
        for (int i = 0; i < left.length; i++) {
            if (prev.kind == left[i]) {
                flag = true;
            }
        }
        for (int i = 0; i < right.length; i++) {
            if (next.kind == right[i]) {
                flag = true;
            }
        }

        while (!flag) {
            System.err.println("Token saltado: " + prev);
            getNextToken();
            prev = getToken(0);
            next = getToken(1);
            if (prev.kind == EOF || next.kind == EOF) {
                flag = true;
            }
            for (int i = 0; i < left.length; i++) {
                if (prev.kind == left[i]) {
                    flag = true;
                }
            }
            for (int i = 0; i < right.length; i++) {
                if (next.kind == right[i]) {
                    flag = true;
                }
            }
        }
    }

//Función principal del programa
    final public boolean ejecutarAnalisis() throws ParseException {
        sentencias();
        return true;
    }

//Función con las posibles sentencias
    final public void sentencias() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FOR:
                case FUNCTION:
                case IF:
                case WHILE:
                case PRINT:
                case IDENTIFICADOR:
        ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    declaracionVariables();
                    break;
                case PRINT:
                    impresionDeDatos();
                    break;
                case IF:
                    sentenciaIf();
                    break;
                case FOR:
                    sentenciaFor();
                    break;
                case WHILE:
                    sentenciaWhile();
                    break;
                case FUNCTION:
                    crearFunciones();
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

//Esta gramática permite la declaración de variables
    final public void declaracionVariables() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {FUNCTION, WHILE, FOR, IF, PRINT};
        try {
            jj_consume_token(IDENTIFICADOR);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case COMA:
          ;
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                multipleIdentificador();
            }
            jj_consume_token(ASIGNACION);
            if (jj_2_1(2)) {
                tipoDato();
                label_3:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMA:
            ;
                            break;
                        default:
                            jj_la1[3] = jj_gen;
                            break label_3;
                    }
                    multipleTipoDato();
                }
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VALOR_ENTERO:
                    case VALOR_FLOTANTE:
                    case VALOR_CADENA:
                    case VALOR_CARACTER:
                    case IDENTIFICADOR:
                        operacionesAritmeticas();
                        label_4:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case COMA:
              ;
                                    break;
                                default:
                                    jj_la1[4] = jj_gen;
                                    break label_4;
                            }
                            multiplesOperacionesAritmeticas();
                        }
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case DELIMITADOR:
                    jj_consume_token(DELIMITADOR);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
        } catch (ParseException ex) {
            System.out.println("Problema en variable");
            registraErrorSintactico("Error sintactico, en la declaracion de una o mas variables.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica se usa cuando se declaran varios tipos de datos en una sola línea
    final public void multipleIdentificador() throws ParseException {
        jj_consume_token(COMA);
        jj_consume_token(IDENTIFICADOR);
    }

//Esta gramatica complementa la anterior, sirve para asignar múltiples valores de la forma :  x, y = 1, 2;
    final public void multipleTipoDato() throws ParseException {
        jj_consume_token(COMA);
        tipoDato();
    }

//Esta gramatica se encarga de realizar multiples operaciones aritmeticas de asignacion en una sola linea, puede ocurrir o no
    final public void multiplesOperacionesAritmeticas() throws ParseException {
        jj_consume_token(COMA);
        operacionesAritmeticas();
    }

//Esta gramática invoca los distintos tipos de dato
    final public void tipoDato() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VALOR_ENTERO:
                jj_consume_token(VALOR_ENTERO);
                break;
            case VALOR_FLOTANTE:
                jj_consume_token(VALOR_FLOTANTE);
                break;
            case VALOR_CADENA:
                jj_consume_token(VALOR_CADENA);
                break;
            case VALOR_CARACTER:
                jj_consume_token(VALOR_CARACTER);
                break;
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

//Esta gramatica se encarga de la impresion de datos
    final public void impresionDeDatos() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {PARENTESIS_CIERRE};
        try {
            jj_consume_token(PRINT);
            jj_consume_token(PARENTESIS_APERTURA);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VALOR_ENTERO:
                case VALOR_FLOTANTE:
                case VALOR_CADENA:
                case VALOR_CARACTER:
                    tipoDato();
                    break;
                case IDENTIFICADOR:
                    jj_consume_token(IDENTIFICADOR);
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(PARENTESIS_CIERRE);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case DELIMITADOR:
                    jj_consume_token(DELIMITADOR);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
        } catch (ParseException ex) {
            System.out.println("Problema en impresion");
            registraErrorSintactico("Error sintactico, problema en la impresion de datos.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica se encarga de la creacion de tablas
    final public void crearTabla() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {IDENTIFICADOR, FUNCTION, WHILE, FOR, IF, PRINT};
        try {
            jj_consume_token(IDENTIFICADOR);
            jj_consume_token(ASIGNACION);
            jj_consume_token(LLAVE_APERTURA);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VALOR_ENTERO:
                case VALOR_FLOTANTE:
                case VALOR_CADENA:
                case VALOR_CARACTER:
                    valoresDeTabla();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
            jj_consume_token(LLAVE_CIERRE);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case DELIMITADOR:
                    jj_consume_token(DELIMITADOR);
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    ;
            }
        } catch (ParseException ex) {
            System.out.println("Problema en tabla");
            registraErrorSintactico("Error sintactico, problema en la creacion de una tabla.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica apoya agrupando los posibles valores de un tabla 
    final public void valoresDeTabla() throws ParseException {
        tipoDato();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    break label_5;
            }
            jj_consume_token(COMA);
            tipoDato();
        }
    }

//Esta es la gramatica general para un if
    final public void sentenciaIf() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {FUNCTION, FOR, WHILE};
        try {
            jj_consume_token(IF);
            sentenciaComparacion();
            jj_consume_token(THEN);
            sentencias();
            label_6:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ELSEIF:
          ;
                        break;
                    default:
                        jj_la1[13] = jj_gen;
                        break label_6;
                }
                sentenciaElseIf();
            }
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ELSE:
          ;
                        break;
                    default:
                        jj_la1[14] = jj_gen;
                        break label_7;
                }
                sentenciaElse();
            }
            jj_consume_token(END);
        } catch (ParseException ex) {
            System.out.println("Problema en if");
            registraErrorSintactico("Error sintactico, problema en un if.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica ayuda agrupando condicionales, para hacer mas facil invocarlos de manera multiple
    final public void sentenciaComparacion() throws ParseException {
        tiposComparables();
        comparadores();
        tiposComparables();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[15] = jj_gen;
                    break label_8;
            }
            jj_consume_token(COMA);
            tiposComparables();
            comparadores();
            tiposComparables();
        }
    }

//Esta gramatica solo agrupa los posibles tipos de datos o variables
    final public void tiposComparables() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VALOR_ENTERO:
            case VALOR_FLOTANTE:
            case VALOR_CADENA:
            case VALOR_CARACTER:
                tipoDato();
                break;
            case IDENTIFICADOR:
                jj_consume_token(IDENTIFICADOR);
                break;
            default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

//Esta gramatica agrupa los tokens que sirven para comparar valores
    final public void comparadores() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IGUAL_A:
                jj_consume_token(IGUAL_A);
                break;
            case DIFERENTE:
                jj_consume_token(DIFERENTE);
                break;
            case MAYOR:
                jj_consume_token(MAYOR);
                break;
            case MENOR:
                jj_consume_token(MENOR);
                break;
            case MENOR_IGUAL:
                jj_consume_token(MENOR_IGUAL);
                break;
            case MAYOR_IGUAL:
                jj_consume_token(MAYOR_IGUAL);
                break;
            case AND_LOGICO:
                jj_consume_token(AND_LOGICO);
                break;
            case OR_LOGICO:
                jj_consume_token(OR_LOGICO);
                break;
            default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

//Esta gramatica es para los elseif, puede o no incluirse
    final public void sentenciaElseIf() throws ParseException {
        jj_consume_token(ELSEIF);
        tiposComparables();
        comparadores();
        tiposComparables();
        jj_consume_token(THEN);
        sentencias();
    }

//Esta gramatica es para los else, puede o no venir
    final public void sentenciaElse() throws ParseException {
        jj_consume_token(ELSE);
        sentencias();
    }

//Esta es la gramatica general para un for
    final public void sentenciaFor() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {FUNCTION, WHILE, IF};
        try {
            jj_consume_token(FOR);
            jj_consume_token(IDENTIFICADOR);
            jj_consume_token(ASIGNACION);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VALOR_ENTERO:
                    jj_consume_token(VALOR_ENTERO);
                    break;
                case VALOR_FLOTANTE:
                    jj_consume_token(VALOR_FLOTANTE);
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(COMA);
            tiposDatosFor();
            jj_consume_token(DO);
            sentencias();
            jj_consume_token(END);
        } catch (ParseException ex) {
            System.out.println("Problema en for");
            registraErrorSintactico("Error sintactico, problema en un for.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica agrupa los tipos de datos que se pueden usar en un for
    final public void tiposDatosFor() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFICADOR:
                jj_consume_token(IDENTIFICADOR);
                break;
            case VALOR_ENTERO:
                jj_consume_token(VALOR_ENTERO);
                break;
            case VALOR_FLOTANTE:
                jj_consume_token(VALOR_FLOTANTE);
                break;
            default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

//Esta es la gramatica general para un while
    final public void sentenciaWhile() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {FUNCTION, FOR, IF};
        try {
            jj_consume_token(WHILE);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VALOR_ENTERO:
                case VALOR_FLOTANTE:
                case VALOR_CADENA:
                case VALOR_CARACTER:
                case IDENTIFICADOR:
                    sentenciaComparacion();
                    break;
                case TRUE:
                    jj_consume_token(TRUE);
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(DO);
            sentencias();
            jj_consume_token(END);
        } catch (ParseException ex) {
            System.out.println("Problema en while");
            registraErrorSintactico("Error sintactico, problema en un while.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica se encarga de la creacion de funciones
    final public void crearFunciones() throws ParseException {
        int[] tokensIzquierda = {};
        int[] tokensDerecha = {FOR, WHILE, IF};
        try {
            jj_consume_token(FUNCTION);
            jj_consume_token(IDENTIFICADOR);
            jj_consume_token(PARENTESIS_APERTURA);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    parametrosFuncion();
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    ;
            }
            jj_consume_token(PARENTESIS_CIERRE);
            cuerpoFuncion();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case RETURN:
                    sentenciaReturn();
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    ;
            }
            jj_consume_token(END);
        } catch (ParseException ex) {
            System.out.println("Problema en funcion");
            registraErrorSintactico("Error sintactico, problema en una funcion.", ex.currentToken.next);
            skipTo(tokensIzquierda, tokensDerecha);
        }
    }

//Esta gramatica se encarga de los parametros de la funcion, de 0 a n
    final public void parametrosFuncion() throws ParseException {
        jj_consume_token(IDENTIFICADOR);
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMA:
        ;
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_9;
            }
            jj_consume_token(COMA);
            jj_consume_token(IDENTIFICADOR);
        }
    }

//Esta gramatica se encarga de operaciones dentro de funciones
    final public void cuerpoFuncion() throws ParseException {
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FOR:
                case IF:
                case LOCAL:
                case WHILE:
                case PRINT:
        ;
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    break label_10;
            }
            if (jj_2_2(3)) {
                declaracionVariablesFuncion();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LOCAL:
                        crearTablaFuncion();
                        break;
                    case PRINT:
                        impresionDeDatos();
                        break;
                    case IF:
                        sentenciaIf();
                        break;
                    case FOR:
                        sentenciaFor();
                        break;
                    case WHILE:
                        sentenciaWhile();
                        break;
                    default:
                        jj_la1[25] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        }
    }

//Esta gramatica auxilia para creacion de variables dentro de una funcion (locales)
    final public void declaracionVariablesFuncion() throws ParseException {
        jj_consume_token(LOCAL);
        declaracionVariables();
    }

//Esta gramatica auxilia para la creacion de tablas dentro de una funcion (locales)
    final public void crearTablaFuncion() throws ParseException {
        jj_consume_token(LOCAL);
        crearTabla();
    }

//Esta gramatica ayuda a realizar un retorno sencillo o complejo
    final public void sentenciaReturn() throws ParseException {
        jj_consume_token(RETURN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VALOR_ENTERO:
            case VALOR_FLOTANTE:
            case VALOR_CADENA:
            case VALOR_CARACTER:
                tipoDato();
                break;
            case IDENTIFICADOR:
                jj_consume_token(IDENTIFICADOR);
                break;
            default:
                jj_la1[26] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DELIMITADOR:
                jj_consume_token(DELIMITADOR);
                break;
            default:
                jj_la1[27] = jj_gen;
                ;
        }
    }

//Esta gramatica ayuda a realizar multiples operaciones aritmeticas en una sola sentencia
    final public void operacionesAritmeticas() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VALOR_ENTERO:
            case VALOR_FLOTANTE:
            case VALOR_CADENA:
            case VALOR_CARACTER:
                tipoDato();
                break;
            case IDENTIFICADOR:
                jj_consume_token(IDENTIFICADOR);
                break;
            default:
                jj_la1[28] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        operadoresAritmeticos();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VALOR_ENTERO:
            case VALOR_FLOTANTE:
            case VALOR_CADENA:
            case VALOR_CARACTER:
                tipoDato();
                break;
            case IDENTIFICADOR:
                jj_consume_token(IDENTIFICADOR);
                break;
            default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        label_11:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUMA:
                case RESTA:
                case MULTIPLICACION:
                case DIVISION:
                case MODULO:
        ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_11;
            }
            operadoresAritmeticos();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VALOR_ENTERO:
                case VALOR_FLOTANTE:
                case VALOR_CADENA:
                case VALOR_CARACTER:
                    tipoDato();
                    break;
                case IDENTIFICADOR:
                    jj_consume_token(IDENTIFICADOR);
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

//Esta gramatica ayuda agrupando los operadores aritmeticos
    final public void operadoresAritmeticos() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUMA:
                jj_consume_token(SUMA);
                break;
            case RESTA:
                jj_consume_token(RESTA);
                break;
            case DIVISION:
                jj_consume_token(DIVISION);
                break;
            case MULTIPLICACION:
                jj_consume_token(MULTIPLICACION);
                break;
            case MODULO:
                jj_consume_token(MODULO);
                break;
            default:
                jj_la1[32] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_3R_13() {
        if (jj_3R_15()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_scan_token(LOCAL)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_12()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_13()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_scan_token(COMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_12() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(56)) {
            jj_scanpos = xsp;
            if (jj_scan_token(57)) {
                jj_scanpos = xsp;
                if (jj_scan_token(58)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(59)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_18()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_scan_token(IDENTIFICADOR)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_17()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(ASIGNACION)) {
            return true;
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public AnalizadorLUATokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[33];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x600700, 0x600700, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000, 0x0, 0x20000, 0x0, 0x601500, 0x601500, 0x0, 0x0, 0x0, 0x0, 0x3e000000, 0x0, 0x3e000000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x10000000, 0x10000000, 0x800000, 0x800000, 0x800000, 0x1f000000, 0x100000, 0xf000000, 0x1f000000, 0x100000, 0xf000000, 0x100000, 0x800000, 0x0, 0x0, 0x800000, 0x1f000000, 0x1fe0, 0x3000000, 0x13000000, 0x1f000000, 0x10000000, 0x0, 0x800000, 0x0, 0x0, 0x1f000000, 0x100000, 0x1f000000, 0x1f000000, 0x0, 0x1f000000, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[2];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public AnalizadorLUA(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public AnalizadorLUA(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new AnalizadorLUATokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public AnalizadorLUA(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new AnalizadorLUATokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public AnalizadorLUA(AnalizadorLUATokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(AnalizadorLUATokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 33; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[65];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 33; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 65; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 2; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
